MAVEN 

A DEPNDENCY ON B 
B DEPNDENCY ON C 

THIS TYPE OF DEPNDENCY IS CALLED TRANSTITIVE Dependiences

SCOPES IN MAVEN 

1)Compile Time  -- COMPLIE TIME -- TEST TIME -- RUN TIME  -- HIBERNATE 
2)Provided   -- COMPLIE TIME -- TEST TIME  -- NOT REQURIED IN RUN TIME Ex  : SERVLET API.jar ..because this jar available in server while run time 
3)runtime   -- 
4)test
5)system
6)import 


Effective pom == Super pom + present application pom 


Build Configurations 
======================

1) Plugin configuration 
2) Resource Configuration 

plugin COnfiguation 

=================

build plugins 

clean
compile 
deploy 
install
resources : 
ear : 
jar 
war
 
 
 Reporting 
 
 
 
 
 Commands :
 
 mvn clean install
 mvn package -DskipTests
 mvn package -Dmaven.skip.test=true
 
 1. mvn clean
This command cleans the maven project by deleting the target directory. The command output relevant messages are shown below.

2. mvn compiler:compile
This command compiles the java source classes of the maven project.


3. mvn compiler:testCompile
This command compiles the test classes of the maven project. 
 

4. mvn package
This command builds the maven project and packages them into a JAR, WAR, etc.
The output shows the location of the JAR file just before the “BUILD SUCCESS” message. Notice the package goal executes compile, testCompile, and test goals before packaging the build.

5. mvn install
This command builds the maven project and installs the project files (JAR, WAR, pom.xml, etc) to the local repository.

6. mvn deploy
This command is used to deploy the artifact to the remote repository. The remote repository should be configured properly in the project pom.xml file distributionManagement tag. The server entries in the maven settings.xml file is used to provide authentication details. 
 
7. mvn validate
This command validates the maven project that everything is correct and all the necessary information is available.

8. mvn dependency:tree
This command generates the dependency tree of the maven project.

9. mvn dependency:analyze
This command analyzes the maven project to identify the unused declared and used undeclared dependencies. It’s useful in reducing the build size by identifying the unused dependencies and then remove it from the pom.xml file.

10. mvn archetype:generate
Maven archetypes is a maven project templating toolkit. We can use this command to generate a skeleton maven project of different types, such as JAR, web application, maven site, etc. Recommended Reading: Creating a Java Project using Maven Archetypes

11. mvn site:site
This command generates a site for the project. You will notice a “site” directory in the target after executing this command. There will be multiple HTML files inside the site directory that provides information related to the project.


12. mvn test
This command is used to run the test cases of the project using the maven-surefire-plugin.

14. mvn verify
This command build the project, runs all the test cases and run any checks on the results of the integration tests to ensure quality criteria are met.


15. mvn -help
This command prints the maven usage and all the available options for us to use.


16. mvn -f maven-example-jar/pom.xml package
This command is used to build a project from a different location. We are providing the pom.xml file location to build the project. It’s useful when you have to run a maven build from a script.


17. mvn -o package
This command is used to run the maven build in the offline mode. It’s useful when we have all the required JARs download in the local repository and we don’t want Maven to look for any JARs in the remote repository.


18. mvn -q package
Runs the maven build in the quiet mode, only the test cases results and errors are displayed.


19. mvn -X package
Prints the maven version and runs the build in the debug mode. It’s opposite of the quiet mode and you will see a lot of debug messages in the console.


20. mvn -v
Used to display the maven version information.


21. mvn -V package
This command prints the maven version and then continue with the build. It’s equivalent to the commands mvn -v;mvn package.


22. mvn -DskipTests package
The skipTests system property is used to skip the unit test cases from the build cycle. We can also use -Dmaven.test.skip=true to skip the test cases execution.

23. mvn -T 4 package
This command tells maven to run parallel builds using the specified thread count. It’s useful in multiple module projects where modules can be built in parallel. It can reduce the build time of the project.

Life Cycle 
======

Validate: This step validates if the project structure is correct. For example – It checks if all the dependencies have been downloaded and are available in the local repository.
Compile: It compiles the source code, converts the .java files to .class and stores the classes in target/classes folder.
Test: It runs unit tests for the project.
Package: This step packages the compiled code in distributable format like JAR or WAR.
Integration test: It runs the integration tests for the project.
Verify: This step runs checks to verify that the project is valid and meets the quality standards.
Install: This step installs the packaged code to the local Maven repository.
Deploy: It copies the packaged code to the remote repository for sharing it with other developers.



maven Commands:

mvn clean: Cleans the project and removes all files generated by the previous build.
mvn compile: Compiles source code of the project.
mvn test-compile: Compiles the test source code.
mvn test: Runs tests for the project.
mvn package: Creates JAR or WAR file for the project to convert it into a distributable format.
mvn install: Deploys the packaged JAR/ WAR file to the local repository.
mvn deploy: Copies the packaged JAR/ WAR file to the remote repository after compiling, running tests and building the project.


Creating maven project through cmd 

mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false




 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 